---
AWSTemplateFormatVersion: 2010-09-09

Description: 'Mirovoy Reference Architecture — VPC —
    This template creates three subnets in each of two availability
    zones, in accordance with the Mirovoy Reference Architecture. Each
    AZ will have two private subnets — one for applications and one for
    data — and a public AZ.'

Metadata:

  Authors:
    Description: Chris Richardson (cwr@mirovoysales.com)
  License:
    Description: 'Copyright 2018 Mirovoy Sales, s.r.o.  and its
	affiliates. All Rights Reserved.  This is a derivative work
	of an Amazon template, and as such falls under the derivate
	works section of the the Amazon Software License (the
	"License").  You may not use this file except in compliance
	with the License. A copy of the License is located at
	http://aws.amazon.com/asl/ This file is distributed on an
	"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
	either express or implied. See the License for the specific
	language governing permissions and limitations under the
	License.'

  AWS::CloudFormation::Interface:

    ParameterGroups:
      -
        Label:
          default: Amazon VPC Parameters
        Parameters:
          - NumberOfAZs
          - AvailabilityZones
          - VpcCidr
          - VpcTenancy
          - PublicSubnet1Cidr
          - PublicSubnet2Cidr
          - AppSubnet1Cidr
          - AppSubnet2Cidr
          - DataSubnet1Cidr
          - DataSubnet2Cidr

    ParameterLabels:
      AvailabilityZones:
        default: Availability Zones
      NumberOfAZs:
        default: Number of Availability Zones
      VpcCidr:
        default: VpcCidr
      VpcTenancy:
        default: VpcTenancy
      PublicSubnet1Cidr:
        default: Public Subnet 1
      PublicSubnet2Cidr:
        default: Public Subnet 2
      AppSubnet1Cidr:
        default: App Subnet 1
      AppSubnet2Cidr:
        default: App Subnet 2
      DataSubnet1Cidr:
        default: Data Subnet 1
      DataSubnet2Cidr:
        default: Data Subnet 2

Parameters:

  AvailabilityZones:
    Description: 'List of Availability Zones to use for the subnets in the VPC.
      Note: The logical order is preserved.'
    Type: List<AWS::EC2::AvailabilityZone::Name>
  NumberOfAZs:
    AllowedValues:
      - 1
      - 2
    Default: 2
    Description: Number of Availability Zones to use in the VPC. This must
      match your selections in the list of Availability Zones parameter.
    Type: Number
  VpcCidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/(1[6-9]|2[0-8])'
    ConstraintDescription: CIDR block parameter must be in the form
      x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    Type: String
  VpcTenancy:
    AllowedValues:
      - default
      - dedicated
    Default: default
    Description: The allowed tenancy of instances launched into the VPC
    Type: String
  DataSubnet1Cidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/(1[6-9]|2[0-8])'
    ConstraintDescription: CIDR block parameter must be in the form
      x.x.x.x/16-28
    Default: 10.0.100.0/24
    Description: CIDR block for data subnet 1 located in Availability Zone 1
    Type: String
  DataSubnet2Cidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/(1[6-9]|2[0-8])'
    ConstraintDescription: CIDR block parameter must be in the form
      x.x.x.x/16-28
    Default: 10.0.101.0/24
    Description: CIDR block for data subnet 2 located in Availability Zone 2
    Type: String
  PublicSubnet1Cidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/(1[6-9]|2[0-8])'
    ConstraintDescription: CIDR block parameter must be in the form
      x.x.x.x/16-28
    Default: 10.0.200.0/24
    Description: CIDR block for Public subnet 1 located in Availability Zone 1
    Type: String
  PublicSubnet2Cidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/(1[6-9]|2[0-8])'
    ConstraintDescription: CIDR block parameter must be in the form
      x.x.x.x/16-28
    Default: 10.0.201.0/24
    Description: CIDR block for Public subnet 2 located in Availability Zone 2
    Type: String
  AppSubnet1Cidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/(1[6-9]|2[0-8])'
    ConstraintDescription: CIDR block parameter must be in the form
      x.x.x.x/16-28
    Default: 10.0.4.0/22
    Description: CIDR block for App subnet 1 located in Availability Zone 1
    Type: String
  AppSubnet2Cidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/(1[6-9]|2[0-8])'
    ConstraintDescription: CIDR block parameter must be in the form
      x.x.x.x/16-28
    Default: 10.0.8.0/22
    Description: CIDR block for App subnet 2 located in Availability Zone 2
    Type: String

Conditions:

  NumberOfAZs1:
    !Equals ['1', !Ref NumberOfAZs]
  NumberOfAZs2:
    !Equals ['2', !Ref NumberOfAZs]
  AZ1: !Or
    - !Condition NumberOfAZs1
    - !Condition NumberOfAZs2
  AZ2: !Condition NumberOfAZs2

Resources:

  AppSubnet1:
    Condition: AZ1
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !Ref AvailabilityZones]
      CidrBlock: !Ref AppSubnet1Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ['', ['AppSubnet1 / ', !Ref 'AWS::StackName']]
        - Key: SubnetType
          Value: Private
      VpcId: !Ref Vpc
  AppSubnet2:
    Condition: AZ2
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !Ref AvailabilityZones]
      CidrBlock: !Ref AppSubnet2Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ['', ['AppSubnet2 / ', !Ref 'AWS::StackName']]
        - Key: SubnetType
          Value: Private
      VpcId: !Ref Vpc

  AppSubnetRouteTableAssociation1:
    Condition: AZ1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable1
      SubnetId: !Ref AppSubnet1
  AppSubnetRouteTableAssociation2:
    Condition: AZ2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable2
      SubnetId: !Ref AppSubnet2

  DataSubnet1:
    Condition: AZ1
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !Ref AvailabilityZones]
      CidrBlock: !Ref DataSubnet1Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ['', ['DataSubnet1 / ', !Ref 'AWS::StackName']]
        - Key: SubnetType
          Value: Private
      VpcId: !Ref Vpc
  DataSubnet2:
    Condition: AZ2
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !Ref AvailabilityZones]
      CidrBlock: !Ref DataSubnet2Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ['', ['DataSubnet2 / ', !Ref 'AWS::StackName']]
        - Key: SubnetType
          Value: Private
      VpcId: !Ref Vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['', ['InternetGateway / ', !Ref 'AWS::StackName']]
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['', ['PublicRouteTable / ', !Ref 'AWS::StackName']]
        - Key: Network
          Value: Public
      VpcId: !Ref Vpc
  PublicRouteTableAssociation1:
    Condition: AZ1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicRouteTableAssociation2:
    Condition: AZ2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet1:
    Condition: AZ1
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !Ref AvailabilityZones]
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['', ['PublicSubnet1 / ', !Ref 'AWS::StackName']]
        - Key: SubnetType
          Value: Public
      VpcId: !Ref Vpc
  PublicSubnet2:
    Condition: AZ2
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !Ref AvailabilityZones]
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['', ['PublicSubnet2 / ', !Ref 'AWS::StackName']]
        - Key: SubnetType
          Value: Public
      VpcId: !Ref Vpc

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Join ['', ['Vpc / ', !Ref 'AWS::StackName']]
  VpcFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt VpcFlowLogsRole.Arn
      LogGroupName: !Join ['', [!Ref 'AWS::StackName', '-FlowLog']]
      ResourceId: !Ref Vpc
      ResourceType: VPC
      TrafficType: ALL
  VpcFlowLogsLogGroup:
    Type: AWS::Logs::LogGroup
  VpcFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
      Path: '/'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*'

Outputs:

  Vpc:
    Value: !Ref Vpc
  VpcCidr:
    Value: !Ref VpcCidr
  PublicSubnet1:
    Condition: AZ1
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Condition: AZ2
    Value: !Ref PublicSubnet2
  AppSubnet1:
    Condition: AZ1
    Value: !Ref AppSubnet1
  AppSubnet2:
    Condition: AZ2
    Value: !Ref AppSubnet2
  DataSubnet1:
    Condition: AZ1
    Value: !Ref DataSubnet1
  DataSubnet2:
    Condition: AZ2
    Value: !Ref DataSubnet2
  DataSubnet:
    Value:
      !If [NumberOfAZs1, !Ref DataSubnet1,
           !Join [',', [!Ref DataSubnet1, !Ref DataSubnet2]]
      ]
  AppSubnet:
    Value:
      !If [NumberOfAZs1, !Ref AppSubnet1,
           !Join [',', [!Ref AppSubnet1, !Ref AppSubnet2]]
      ]
  PublicSubnet:
    Value:
      !If [NumberOfAZs1, !Ref PublicSubnet1,
           !Join [',', [!Ref PublicSubnet1, !Ref PublicSubnet2]]
      ]
