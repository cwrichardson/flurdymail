---
AWSTemplateFormatVersion: 2010-09-09

Description: 'Mirovoy Reference Architecture - Create Security Groups
    This template creates the security groups to secure the Mirovoy Reference
    Architecture.'

Metadata:

  Authors:
    Description: Chris Richardson (cwr@mirovoysales.com)
  License:
    Description: 'Copyright 2018 Mirovoy Sales, s.r.o.  and its
	affiliates. All Rights Reserved.  This is a derivative work
	of an Amazon template, and as such falls under the derivate
	works section of the the Amazon Software License (the
	"License").  You may not use this file except in compliance
	with the License. A copy of the License is located at
	http://aws.amazon.com/asl/ This file is distributed on an
	"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
	either express or implied. See the License for the specific
	language governing permissions and limitations under the
	License.'

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: AWS Parameters
        Parameters:
          - SshAccessCidr
          - Vpc
          - VpcStackName
          - NumberOfAZs
      - Label:
          default: Optional security groups to create
        Parameters:
          - CreateMailSecGroup

    ParameterLabels:
      CreateMailSecGroup:
        default: Create a security group for mail servers
      NumberOfAZs:
        default: Number of Availability Zones
      SshAccessCidr:
        default: SSH Access From
      Vpc:
        default: Vpc Id
      VpcStackName:
        default: VPC Stack Name

Parameters:
  NumberOfAZs:
    AllowedValues:
      - 1
      - 2
    Default: 2
    Description: Number of Availability Zones to use in the VPC. This must
      match your selections in the list of Availability Zones parameter.
    Type: Number
  SshAccessCidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Description: The CIDR IP range that is permitted to SSH to bastion
      instance. Note - a value of 0.0.0.0/0 will allow access from ANY IP
      address.
    Type: String
    Default: 0.0.0.0/0
  Vpc:
    AllowedPattern: ^(vpc-)([a-z0-9]{8}|[a-z0-9]{17})$
    Description: The Vpc Id of an existing Vpc.
    Type: AWS::EC2::VPC::Id
  VpcStackName:
    AllowedPattern: ^([a-zA-Z0-9]+[a-zA-Z0-9\-]*)$
    ConstraintDescription: "A stack name can contain only alphanumeric
      characters (case-sensitive) and hyphens. It must start with an
      alphabetic character and can't be longer than 128 characters."
    Description: The name of the stack that was used to create the VPC
    MaxLength: 128
    Type: String
  CreateMailSecGroup:
    AllowedValues:
      - 'True'
      - 'False'
    Default: 'True'
    Description: Create a security group for use by mail servers
    Type: String

Conditions:

  2AZs:
    !Equals ['2', !Ref NumberOfAZs]
  WantsMail:
    !Equals ['True', !Ref CreateMailSecGroup]
  WantsNothing:
    !Not [!Equals ['True', !Ref CreateMailSecGroup]]

Resources:

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Bastion instances
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SshAccessCidr
      VpcId:
        !Ref Vpc

  NatSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for NAT Instances
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup
        # Always allow ports 80 and 443, so at a minimum instances can get
        # security updates (yum uses these ports)
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp:
            Fn::ImportValue: !Sub '${VpcStackName}:AppSubnet1Cidr'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp:
            Fn::ImportValue: !Sub '${VpcStackName}:AppSubnet1Cidr'
      VpcId:
        !Ref Vpc

  NatSecurityGroupIngress2port80:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: 2AZs
    Properties:
      GroupId: !Ref NatSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp:
        Fn::ImportValue: !Sub '${VpcStackName}:AppSubnet2Cidr'

  NatSecurityGroupIngress2port443:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: 2AZs
    Properties:
      GroupId: !Ref NatSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp:
        Fn::ImportValue: !Sub '${VpcStackName}:AppSubnet2Cidr'

  NatSecurityGroupIngressForMail:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: WantsMail
    Properties:
      GroupId: !Ref NatSecurityGroup
      IpProtocol: tcp
      FromPort: 25
      ToPort: 25
      SourceSecurityGroupId: !Ref MailSecurityGroup

  DatabaseSecurityGroupMail:
    Type: AWS::EC2::SecurityGroup
    Condition: WantsMail
    Properties:
      GroupDescription: Security group for RDS Databases
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref MailSecurityGroup
      VpcId:
        !Ref Vpc

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: WantsNothing
    Properties:
      GroupDescription: Security group for RDS Databases
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.0.0/20
      VpcId:
        !Ref Vpc

  MailSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: WantsMail
    Properties:
      GroupDescription: Security group for MX Servers
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup
          #
          # port 25 for SMTP relay between servers
          # 587 for SMPT from clients (STARTLS)
          # 993 for IMAP
          # 995 for POP3
          #
        - IpProtocol: tcp
          FromPort: 25
          ToPort: 25
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 587
          ToPort: 587
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 993
          ToPort: 993
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 995
          ToPort: 995
          CidrIp: 0.0.0.0/0
      VpcId:
        !Ref Vpc

Outputs:
  BastionSecurityGroup:
    Description: Security group for jump/bastion servers
    Value: !Ref BastionSecurityGroup
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", BastionSecurityGroup]]
  DatabaseSecurityGroupMail:
    Condition: WantsMail
    Description: Security group for RDS database access
    Value: !Ref DatabaseSecurityGroupMail
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", DatabaseSecurityGroup]]
  DatabaseSecurityGroup:
    Condition: WantsNothing
    Description: Security group for RDS database access
    Value: !Ref DatabaseSecurityGroup
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", DatabaseSecurityGroup]]
  MailSecurityGroup:
    Condition: WantsMail
    Description: Security group for MX servers
    Value: !Ref MailSecurityGroup
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", MailSecurityGroup]]
