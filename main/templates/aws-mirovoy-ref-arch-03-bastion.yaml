---
AWSTemplateFormatVersion: 2010-09-09

Description: 'Mirovoy Reference Architecture - Bastion Auto-Scaling Group
    This template creates a bastion auto-scaling group in the Mirovoy
    VPC public subnets. By default the auto-scaling configuration is
    desired: 0, min: 0, max:1. Cross reference with the security groups
    configuraiton which controls access to the bastion hosts.'

Metadata:
  Authors:
    Description: Chris Richardson (cwr@mirovoysales.com)
  License:
    Description: 'Copyright 2018 Mirovoy Sales, s.r.o.  and its
	affiliates. All Rights Reserved.  This is a derivative work
	of an Amazon template, and as such falls under the derivate
	works section of the the Amazon Software License (the
	"License").  You may not use this file except in compliance
	with the License. A copy of the License is located at
	http://aws.amazon.com/asl/ This file is distributed on an
	"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
	either express or implied. See the License for the specific
	language governing permissions and limitations under the
	License.'

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Bastion Configuration
        Parameters:
          - AdminUser
          - AdminPubKey
          - BastionAMIOS
          - BastionInstanceType
          - BastionSecurityGroup
          - EC2KeyName
          - NumberOfSubnets
          - Subnet
          - EnableBanner
      - Label:
          default: AWS S3 Configuration
        Parameters:
          - CFAssetsBucket
          - S3KeyPrefix
          - SkelFileDir
          - BastionBanner
      - Label:
          default: Overrides
        Parameters:
          - AlternativeIAMRole
          - AlternativeInitializationScript
          - EnvironmentVariables

    ParameterLabels:
      AdminUser:
        default: Alternative superuser account to create
      AdminPubKey:
        default: SSH public key for the AdminUser
      AlternativeIAMRole:
        default: Alternative IAM Role
      AlternativeInitializationScript:
        default: Alternative Initialization Script
      BastionAMIOS:
        default: AMI ID for Bastion Servers
      BastionInstanceType:
        default: Instance Type
      BastionSecurityGroup:
        default: Bastion Security Group
      CFAssetsBucket:
        default: Mirovvoy CloudFront Assets S3 bucket name
      EC2KeyName:
        default: Existing Key Pair
      EnvironmentVariables:
        default: Environment Variables
      NumberOfSubnets:
        default: Number of subnets
      S3KeyPrefix:
        default: Mirovoy CloudFront Assets Bastion S3 bucket key prefix
      SkelFileDir:
        default: Skeleton File Directory
      Subnet:
        default: Subnets

Parameters:
  AdminUser:
    AllowedPattern: "^[a-z][-a-z0-9]*$"
    ConstraintDescription: "Must be a valid username for the OS to be used.
      For sanity's sake, confining this to starting with a lower-case letter,
      followed by an arbitrary number of lower-case letters, numbers, and the
      dash character ('-')."
    Description: 'An alternate account to be created on bastion instances with
      superuser permissions.'
    Type: String
  AdminPubKey:
    Description: 'The public key text to be installed in the authorized_hosts
      file for the admin user. Will also be installed as an accepted key for
      the default admin user.'
    Type: String
  AlternativeIAMRole:
    Description: 'Specify an existing IAM Role name to attach to the bastion.
      If left blank, a new role will be created.'
    Default: ''
    Type: String
  AlternativeInitializationScript:
    AllowedPattern: "^http.*|^$"
    ConstraintDescription: 'URL must begin with "http".'
    Description: 'Specify an alternative initialization script to run during
      setup.'
    Default: ""
    Type: String
  BastionBanner:
    Default: "var/banner_message.txt"
    Description: 'Path and file under S3 prefix for Banner text to display
      upon login. Should not start with a "/".'
    Type: String
  BastionSecurityGroup:
    Description: Select the bastion security group.
    Type: AWS::EC2::SecurityGroup::Id
  BastionAMIOS:
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    Description: AMI ID to use for the mail servers
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
  BastionInstanceType:
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - m3.medium
      - c5.large
    ConstraintDescription: Must be a valid Amazon EC2 instance type.
    Default: t3.nano
    Description: Bastion EC2 instance type.
    Type: String
  CFAssetsBucket:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: 'Mirovoy CloudFront Assets Bucket name can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot
      start or end with a hyphen (-).'
    Default: "mirovoy-cf-assets"
    Description: 'S3 bucket name for the Mirovoy CloudFormation assets.'
    Type: String
  EC2KeyName:
    Description: Name of an EC2 KeyPair. Your bastion instances will launch
      with this KeyPair.
    Type: AWS::EC2::KeyPair::KeyName
  EnableBanner:
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
    Description: 'To include a banner to be displayed when connecting via SSH
      to the bastion, set this parameter to true.'
    Type: String
  EnvironmentVariables:
    Description: 'Specify a comma separated list of environment variables for
      use in bootstrapping by the alternative initialization script. Variables
      must be in the format KEY=VALUE. VALUE cannot contain commas.'
    Default: ''
    Type: String
  NumberOfSubnets:
    AllowedValues:
      - 2
    Description: Number of subnets. This must match your selections in the
      list of subnets below. You should select all Public subnets.
    Default: 2
    Type: String
  S3KeyPrefix:
    AllowedPattern: "^([0-9a-zA-Z-]+/)*$"
    ConstraintDescription: 'Mirovoy CloudFront Assets S3 bucket  key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-),
      and forward slash (/). The prefix should end with a forward slash (/).'
    Default: "bastion/"
    Description: 'S3 key prefix for the Mirovoy CloudFormation assets. This
      should be the top-level directory path inside the bucket, leading to the
      assets for this template (e.g., scripts directory, etc... are located)'
    Type: String
  SkelFileDir:
    Default: "var/skel/"
    Description: "Path under S3 prefix for shell configuration file to put in
      the alternate admin user's home dir, via /etc/skel/. Should end in a
      slash."
    Type: String
  Subnet:
    Description: Select existing subnets. The number selected must match the
      number of subnets above. Subnets selected must be in separate AZs. You
      should select all Public subnets.
    Type: List<AWS::EC2::Subnet::Id>

Conditions:
  CreateIAMRole:
    !Equals [!Ref AlternativeIAMRole, '']
  NumberOfSubnets1:
    !Equals [1, !Ref NumberOfSubnets]
  NumberOfSubnets2:
    !Equals [2, !Ref NumberOfSubnets]
  Subnet0: !Or
    - !Condition NumberOfSubnets1
    - !Condition NumberOfSubnets2
  Subnet1: !Condition NumberOfSubnets2
  UseAlternativeInitialization: !Not [
    !Equals [!Ref AlternativeInitializationScript, '']]

Resources:
  BastionAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Cooldown: 60
      HealthCheckGracePeriod: 120
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref BastionLaunchConfiguration
      MaxSize: 1
      MinSize: 0
      Tags:
        - Key: Name
          Value: !Join ['', ['Bastion / ', !Ref 'AWS::StackName']]
          PropagateAtLaunch: true
      VPCZoneIdentifier:
        !If [NumberOfSubnets1,
             [!Select [0, !Ref Subnet]],
             [!Select [0, !Ref Subnet], !Select [1, !Ref Subnet]]
        ]

  #
  # Combined what were previously BastionHostRole and BastionInstanceRole
  # because you are only allowed to assign one IAM Role per Instance Profile
  #
  BastionHostRole:
    Condition: CreateIAMRole
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource:
                  - arn:aws:logs:*:*:*

  BastionHostPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "BastionPolicy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Action:
              - "s3:GetObject"
            Resource:
              !Sub "arn:aws:s3:::${CFAssetsBucket}/${S3KeyPrefix}*"
          -
            Effect: "Allow"
            Action:
              - "ec2:AssociateAddress"
              - "ec2:DescribeAddress"
            Resource: "*"
      Roles:
        -
          !If [CreateIAMRole, !Ref BastionHostRole, !Ref AlternativeIAMRole]

  BastionHostProfile:
    DependsOn: BastionHostPolicy
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !If [CreateIAMRole, !Ref BastionHostRole, !Ref AlternativeIAMRole]

  BastionLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: "S3"
          roleName: !If [
            CreateIAMRole, !Ref BastionHostRole, !Ref AlternativeIAMRole]
          buckets: [!Ref CFAssetsBucket]
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              "ksh": []
          files:
            /tmp/bastion_bootstrap.sh:
              source: !If [
                UseAlternativeInitialization,
                !Ref AlternativeInitializationScript,
                #
                # Added AWS::Region to the URL, which deviates from the
                # QuickStart example, because without it, it falls back to
                # using an older authentication mechansim, which isn't
                # supported in all regions.
                #
                !Join ['',
                       [!Sub "https://${CFAssetsBucket}.s3-",
                        !Sub "${AWS::Region}.amazonaws.com/${S3KeyPrefix}",
                        "scripts/bastion_bootstrap.sh"
                       ]
                ]
              ]
              mode: "000550"
              owner: "root"
              group: "root"
              authenticaiton: S3AccessCreds
            /etc/ssh/ssh_banner:
              source: !Join
                - ''
                - - !Sub "https://${CFAssetsBucket}.s3-${AWS::Region}"
                  - !Sub ".amazonaws.com/${S3KeyPrefix}${BastionBanner}"
              mode: "000640"
              owner: "root"
              group: "root"
              authentication: S3AccessCreds
            /tmp/profile:
              source: !Join
                - ''
                - - !Sub "https://${CFAssetsBucket}.s3-${AWS::Region}"
                  - !Sub ".amazonaws.com/${S3KeyPrefix}${SkelFileDir}profile"
              mode: "000600"
              owner: "root"
              group: "root"
              authentication: S3AccessCreds
            /tmp/shrc:
              source: !Join
                - ''
                - - !Sub "https://${CFAssetsBucket}.s3-${AWS::Region}"
                  - !Sub ".amazonaws.com/${S3KeyPrefix}${SkelFileDir}shrc"
              mode: "000600"
              owner: "root"
              group: "root"
              authentication: S3AccessCreds
            /tmp/adminpubkey.pub:
              content: !Ref AdminPubKey
              mode: "000600"
              owner: "root"
              group: "root"
          commands:
            b-bootstrap:
              command:
                !Join ["", [
                  "./tmp/bastion_bootstrap.sh",
                  " --banner ",
                  !Ref BastionBanner,
                  " --enable ",
                  !Ref EnableBanner,
                  " --admin-user ",
                  !Ref AdminUser
                ]]
    Properties:
      IamInstanceProfile: !Ref BastionHostProfile
      ImageId: !Ref BastionAMIOS
      InstanceMonitoring: true
      InstanceType: !Ref BastionInstanceType
      KeyName: !Ref EC2KeyName
      SecurityGroups:
        - !Ref BastionSecurityGroup
      UserData: !Base64
        Fn::Join:
          - ''
          - - |
              #!/bin/bash -x
              #
              # update packages
              yum update -y
              # setup environment
            - 'for e in $(echo "'
            - !Ref EnvironmentVariables
            - '" | tr "," " "); do'
            - |2

                  export $e
              done
              export PATH=$PATH:/usr/local/bin
              # install AWS CLI
              which pip &> /dev/null
              if [$? -ne 0] ; then
                  echo "PIP NOT INSTALLED"
            - '    $(yum install -y epel-release; yum install -y python-pip) '
            - '&& echo "PIP INSTALLED"'
            - |2

              fi
              pip install --upgrade pip &> /dev/null
              pip install awscli --ignore-installed six &> /dev/null
            - 'easy_install '
            - 'https://s3.amazonaws.com/cloudformation-examples/'
            - 'aws-cfn-bootstrap-latest.tar.gz'
            - |2

              # run cfn-init
            - '/opt/aws/bin/cfn-init -v --stack '
            - !Ref 'AWS::StackName'
            - '		--resource BastionLaunchConfiguration '
            - '		--region '
            - !Ref 'AWS::Region'
            - |+
